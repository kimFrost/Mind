/**
 * Created by mikkel on 02/08/16.
 */

namespace UserModule {

	type MemberViewModel = SCommerce.Website.Code.WebAPI.Models.Login.MemberViewModel;

	export class UserService {

		public user:MemberViewModel = null;
		//public isLoggedIn: boolean = false;

		public states = {
			isLoggedIn: false
		};

		constructor(private $http:ng.IHttpService,
					private $q:ng.IQService,
					private $rootScope:ng.IRootScopeService,
					private $location) {


			this.isAuthenticated();

		}

		public getUser():ng.IPromise<any> {
			let defer = this.$q.defer();

			var settings:ng.IRequestConfig = {} as ng.IRequestConfig;
			settings.url = "/webapi/login/GetCurrentUser";
			settings.method = "GET";

			this.$http(settings).then((response) => {

				var dataObj: any = response.data;

				if (dataObj.Data === null) {
					this.user = null;
					defer.reject();
				} else {
					this.user = dataObj;
					defer.resolve(dataObj);
				}

			}).catch( (error) => {
				console.log("ERROR: ", error);
				defer.reject();
			});

			return defer.promise;
		}

		public mergeBasket(username:string, password:string, autoLogin:boolean = false, redirect:boolean = false) {
			this.login(username, password, autoLogin, redirect, false, false);
		}


		public login(username:string, password:string, autoLogin:boolean = false, redirect:boolean = false, checkForProducts:boolean = true, mergeBasket:boolean = true):ng.IPromise<boolean> {
			let defer = this.$q.defer();

			var settings:ng.IRequestConfig = {} as ng.IRequestConfig;
			settings.url = "/webapi/login/login";
			settings.method = "POST";
			settings.data = { "Username" : username, "Password" : password, "AutoLogin" : autoLogin, "CheckForProducts":checkForProducts, "MergeBasket":mergeBasket };

			this.$http(settings).then( (response) => {
				var dataObj:any = response.data;
				var redirectUrl = dataObj.RedirectUrl;

				if(redirect) {
					if(this.$location.search().returnurl !== undefined) {
						redirectUrl = this.$location.search().returnurl;
					}
					this.$location.path(redirectUrl);
				}

				//!! No login success in response !!//
				this.states.isLoggedIn = true;
				defer.resolve(true);

			}).catch( (error) => {
				console.log("ERROR: ", error);
				defer.resolve(false);
			});

			return defer.promise;
		}

		public logout():ng.IPromise<any> {
			let defer = this.$q.defer();

			var settings:ng.IRequestConfig = {} as ng.IRequestConfig;
			settings.url = "/webapi/login/logout";
			settings.method = "GET";

			this.$http(settings).then( (response) => {
				this.user = null;
				this.states.isLoggedIn = false;
				var dataObj:any = response.data;
				defer.resolve(dataObj.RedirectUrl);
			}).catch( (error) => {
				console.log("ERROR: ", error);
				defer.reject();
			});

			return defer.promise;
		}

		public isAuthenticated():ng.IPromise<any> {
			let defer = this.$q.defer();

			var settings:ng.IRequestConfig = {} as ng.IRequestConfig;
			settings.url = "/webapi/login/IsAuthenticated";
			settings.method = "GET";

			this.$http(settings).then( (response) => {
				var dataObj:any = response.data;

<<<<<<< HEAD
				this.states.isLoggedIn = dataObj.Authenticated === true;
=======
				this.isLoggedIn = dataObj.Authenticated === true;

>>>>>>> e06721ba5ae23bfa58ca24f5dd958b1c98d078fa
				defer.resolve(dataObj.Authenticated);
			}).catch( (error) => {
				console.log("ERROR: ", error);
				defer.reject();
			});

			return defer.promise;
		}

		public validateEmail(email) {
			var re = /^(?=.{8,})(?=.*[a-zA-Z])(?=.*[0-9\W]).*$/; //?? Is this not password validator? ??//
			return re.test(email);
		}

		public requestPasswordChange(username:string):ng.IPromise<boolean> {
			let defer = this.$q.defer();

			var settings:ng.IRequestConfig = {} as ng.IRequestConfig;
			settings.url = "/webapi/login/RequestPasswordChange?email=" + username;
			settings.method = "GET";
			settings.data = null;

			this.$http(settings).then( (response) => {
				defer.resolve(response.data===true);
			}).catch( (error) => {
				console.log("ERROR: ", error);
				defer.resolve(false);
			});

			return defer.promise;
		}
	}

	angular.module(moduleId).service("userService", UserService);

}
